name: Test and Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  SCRIPT_NAME: Initialize-DevContainer

jobs:
  powershell-tests:
    name: PowerShell Script and Module Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup PowerShell
      shell: pwsh
      run: |
        Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
        Write-Host "Available modules:"
        Get-Module -ListAvailable | Select-Object Name, Version | Sort-Object Name
        
    - name: Install Pester
      shell: pwsh
      run: |
        if (-not (Get-Module -ListAvailable -Name Pester)) {
          Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck
        }
        Import-Module Pester -Force
        Write-Host "Pester version: $((Get-Module Pester).Version)"
        
    - name: Test Entry Point Script
      shell: pwsh
      run: |
        $ScriptPath = "./Initialize-DevContainer.ps1"
        if (Test-Path $ScriptPath) {
          Write-Host "✅ Entry point script found: $ScriptPath"
          # Test script syntax
          $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $ScriptPath -Raw), [ref]$null)
          Write-Host "✅ Script syntax is valid"
        } else {
          Write-Error "❌ Entry point script not found at: $ScriptPath"
          exit 1
        }
        
    - name: Test Module Files
      shell: pwsh
      run: |
        $ModuleFiles = @(
          "./modules/CommonModule.psm1",
          "./modules/AzureModule.psm1",
          "./modules/InteractiveModule.psm1",
          "./modules/DevContainerModule.psm1",
          "./modules/ProjectModule.psm1"
        )
        
        foreach ($ModuleFile in $ModuleFiles) {
          if (Test-Path $ModuleFile) {
            Write-Host "✅ Module file found: $ModuleFile"
            # Test module syntax
            try {
              $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $ModuleFile -Raw), [ref]$null)
              Write-Host "✅ Module syntax is valid: $ModuleFile"
            } catch {
              Write-Error "❌ Module syntax error in $ModuleFile : $_"
              exit 1
            }
          } else {
            Write-Error "❌ Module file not found: $ModuleFile"
            exit 1
          }
        }
        
        # Test legacy module if it exists
        $LegacyModulePath = "./DevContainerAccelerator/DevContainerAccelerator.psd1"
        if (Test-Path $LegacyModulePath) {
          try {
            Test-ModuleManifest -Path $LegacyModulePath
            Write-Host "✅ Legacy module manifest is valid"
          } catch {
            Write-Warning "⚠️ Legacy module manifest has issues: $_"
          }
        }
        
    - name: Run Pester Tests
      shell: pwsh
      run: |
        if (Test-Path "./tests/") {
          Write-Host "Running tests with current working directory: $(Get-Location)"
          
          # Run unit tests first
          if (Test-Path "./tests/unit/") {
            Write-Host "=== Running Unit Tests ==="
            $UnitTestResults = Invoke-Pester -Path "./tests/unit/" -Output Detailed -PassThru
            Write-Host "Unit Tests - Total: $($UnitTestResults.TotalCount), Passed: $($UnitTestResults.PassedCount), Failed: $($UnitTestResults.FailedCount)"
          }
          
          # Run integration tests (with CI-specific settings)
          if (Test-Path "./tests/integration/") {
            Write-Host "=== Running Integration Tests ==="
            $env:CI = "true"  # Set CI environment variable
            $IntegrationTestResults = Invoke-Pester -Path "./tests/integration/" -Output Detailed -PassThru
            Write-Host "Integration Tests - Total: $($IntegrationTestResults.TotalCount), Passed: $($IntegrationTestResults.PassedCount), Failed: $($IntegrationTestResults.FailedCount)"
          }
          
          # Run legacy tests if they exist
          $LegacyTestFile = "./tests/DevContainer.Tests.ps1"
          if (Test-Path $LegacyTestFile) {
            Write-Host "=== Running Legacy Tests ==="
            $LegacyTestResults = Invoke-Pester -Path $LegacyTestFile -Output Detailed -PassThru
            Write-Host "Legacy Tests - Total: $($LegacyTestResults.TotalCount), Passed: $($LegacyTestResults.PassedCount), Failed: $($LegacyTestResults.FailedCount)"
          }
          
          # Combine all results
          $TotalTests = 0
          $TotalPassed = 0
          $TotalFailed = 0
          
          if ($UnitTestResults) {
            $TotalTests += $UnitTestResults.TotalCount
            $TotalPassed += $UnitTestResults.PassedCount
            $TotalFailed += $UnitTestResults.FailedCount
          }
          
          if ($IntegrationTestResults) {
            $TotalTests += $IntegrationTestResults.TotalCount
            $TotalPassed += $IntegrationTestResults.PassedCount
            $TotalFailed += $IntegrationTestResults.FailedCount
          }
          
          if ($LegacyTestResults) {
            $TotalTests += $LegacyTestResults.TotalCount
            $TotalPassed += $LegacyTestResults.PassedCount
            $TotalFailed += $LegacyTestResults.FailedCount
          }
          
          Write-Host ""
          Write-Host "=== Combined Test Summary ==="
          Write-Host "Total Tests: $TotalTests"
          Write-Host "Passed: $TotalPassed"
          Write-Host "Failed: $TotalFailed"
          
          if ($TotalFailed -gt 0) {
            Write-Error "❌ $TotalFailed test(s) failed"
            exit 1
          } else {
            Write-Host "✅ All $TotalPassed tests passed"
          }
        } else {
          Write-Host "⚠️ No tests directory found"
        }

  validate-examples:
    name: Validate Examples
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate Example Structure
      shell: pwsh
      run: |
        $ExamplesPath = "./examples"
        if (Test-Path $ExamplesPath) {
          Write-Host "✅ Examples directory exists"
          $Examples = Get-ChildItem $ExamplesPath -Directory
          Write-Host "Found examples: $($Examples.Name -join ', ')"
          
          foreach ($Example in $Examples) {
            $ReadmePath = Join-Path $Example.FullName "README.md"
            if (Test-Path $ReadmePath) {
              Write-Host "✅ $($Example.Name) has README.md"
            } else {
              Write-Warning "⚠️ $($Example.Name) missing README.md"
            }
          }
        } else {
          Write-Warning "⚠️ No examples directory found"
        }

  validate-documentation:
    name: Validate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check Required Files
      shell: pwsh
      run: |
        $RequiredFiles = @(
          "README.md",
          "LICENSE",
          "Initialize-DevContainer.ps1",
          "modules/CommonModule.psm1",
          "modules/AzureModule.psm1",
          "modules/InteractiveModule.psm1",
          "modules/DevContainerModule.psm1",
          "modules/ProjectModule.psm1"
        )
        
        $AllFilesExist = $true
        foreach ($File in $RequiredFiles) {
          if (Test-Path $File) {
            Write-Host "✅ $File exists"
          } else {
            Write-Error "❌ $File is missing"
            $AllFilesExist = $false
          }
        }
        
        if (-not $AllFilesExist) {
          exit 1
        }
        
    - name: Validate README
      shell: pwsh
      run: |
        $ReadmeContent = Get-Content "README.md" -Raw
        $RequiredSections = @(
          "# DevContainer Template",
          "## Installation",
          "## Usage",
          "## Examples"
        )
        
        foreach ($Section in $RequiredSections) {
          if ($ReadmeContent -match [regex]::Escape($Section)) {
            Write-Host "✅ README contains: $Section"
          } else {
            Write-Warning "⚠️ README missing section: $Section"
          }
        }

  validate-scripts:
    name: Validate PowerShell Scripts
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install PSScriptAnalyzer
      shell: pwsh
      run: |
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -SkipPublisherCheck
        
    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        $ScriptPaths = @(
          "./Initialize-DevContainer.ps1",
          "./Install-DevContainerAccelerator.ps1",
          "./Validate-DevContainerAccelerator.ps1",
          "./modules/CommonModule.psm1",
          "./modules/AzureModule.psm1",
          "./modules/InteractiveModule.psm1",
          "./modules/DevContainerModule.psm1",
          "./modules/ProjectModule.psm1"
        )
        
        $AllIssues = @()
        foreach ($ScriptPath in $ScriptPaths) {
          if (Test-Path $ScriptPath) {
            Write-Host "Analyzing: $ScriptPath"
            $Issues = Invoke-ScriptAnalyzer -Path $ScriptPath -Severity Warning,Error
            if ($Issues) {
              $AllIssues += $Issues
              Write-Host "Found $($Issues.Count) issues in $ScriptPath"
              $Issues | ForEach-Object {
                Write-Host "  - Line $($_.Line): $($_.Message) [$($_.RuleName)]"
              }
            } else {
              Write-Host "✅ No issues found in $ScriptPath"
            }
          } else {
            Write-Warning "⚠️ Script not found: $ScriptPath"
          }
        }
        
        if ($AllIssues.Count -gt 0) {
          Write-Host "Total issues found: $($AllIssues.Count)"
          # For now, just warn about issues, don't fail the build
          # Uncomment the next line to fail on script analyzer issues:
          # exit 1
        }

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [powershell-tests, validate-examples, validate-documentation, validate-scripts]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Test Script and Module Integration
      shell: pwsh
      run: |
        # Test the installation script syntax
        if (Test-Path "./Install-DevContainerAccelerator.ps1") {
          Write-Host "Testing installation script syntax..."
          $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content "./Install-DevContainerAccelerator.ps1" -Raw), [ref]$null)
          Write-Host "✅ Installation script syntax is valid"
        }
        
        # Test the main entry point script syntax
        if (Test-Path "./Initialize-DevContainer.ps1") {
          Write-Host "Testing main script syntax..."
          $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content "./Initialize-DevContainer.ps1" -Raw), [ref]$null)
          Write-Host "✅ Main script syntax is valid"
        }
        
        # Test module syntax
        $ModuleFiles = @(
          "./modules/CommonModule.psm1",
          "./modules/AzureModule.psm1", 
          "./modules/InteractiveModule.psm1",
          "./modules/DevContainerModule.psm1",
          "./modules/ProjectModule.psm1"
        )
        
        foreach ($ModuleFile in $ModuleFiles) {
          if (Test-Path $ModuleFile) {
            Write-Host "Testing module syntax: $ModuleFile"
            $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $ModuleFile -Raw), [ref]$null)
            Write-Host "✅ Module syntax is valid: $([System.IO.Path]::GetFileNameWithoutExtension($ModuleFile))"
          }
        }
        
        Write-Host "✅ All syntax validation tests passed"
